'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interp = exports.evaluateEachExpression = exports.evaluateGetPropUsingIdentifier = exports.evaluateExpression = undefined;

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var evaluateExpression = exports.evaluateExpression = function () {
  var ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(expression, variables) {
    var ret, fnExpression, argExpressions, fn, args, name, _ret, _name, valueExpression, value, _name2, _valueExpression, _value, paramaters, code, isAsync, _fn, _paramaters, codeExpression, _fn2, string, bool, number, objExpression, key, _valueExpression2, obj, _value2, _objExpression, _key, _obj, _value3;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!(expression[0] === C.COMMENT)) {
              _context.next = 4;
              break;
            }

            return _context.abrupt('return');

          case 4:
            if (!(expression instanceof Array && expression.every(function (e) {
              return e instanceof Array;
            }))) {
              _context.next = 9;
              break;
            }

            _context.next = 7;
            return evaluateEachExpression(variables, expression);

          case 7:
            ret = _context.sent;
            return _context.abrupt('return', ret);

          case 9:
            if (!(expression[0] === C.VARIABLE_IDENTIFIER && expression[1] === 'environment')) {
              _context.next = 13;
              break;
            }

            return _context.abrupt('return', new lib.LEnvironment(variables));

          case 13:
            if (!(expression[0] === C.FUNCTION_CALL)) {
              _context.next = 28;
              break;
            }

            // Call a function: "function(arg1, arg2, arg3...)"

            // Get the function and argument expressions from the expression list.
            fnExpression = expression[1];
            argExpressions = expression[2];

            // Evaluate the function expression to get the actual function.

            _context.next = 18;
            return evaluateExpression(fnExpression, variables);

          case 18:
            fn = _context.sent;

            if (fn instanceof lib.LFunction) {
              _context.next = 21;
              break;
            }

            throw new Error('Can\'t call ' + chalk.cyan(fn) + ' because it\'s not a function');

          case 21:

            fn.argumentScope = variables;
            args = argExpressions;

            // Use lib.call to call the function with the evaluated arguments.

            _context.next = 25;
            return lib.call(fn, args);

          case 25:
            return _context.abrupt('return', _context.sent);

          case 28:
            if (!(expression[0] === C.VARIABLE_IDENTIFIER)) {
              _context.next = 38;
              break;
            }

            // Get a variable: "name"

            // Get the name from the expression list.
            name = expression[1];

            // console.log(`Getting variable ${name}...`)
            // console.log(name in variables)

            // Return the variable's value, or, if the variable doesn't exist, throw an
            // error.

            if (!(name in variables)) {
              _context.next = 35;
              break;
            }

            // console.log('Return:', variables[name])
            _ret = variables[name].value;
            return _context.abrupt('return', _ret);

          case 35:
            throw new Error(chalk.cyan(name) + ' is not defined.');

          case 36:
            _context.next = 119;
            break;

          case 38:
            if (!(expression[0] === C.VARIABLE_ASSIGN)) {
              _context.next = 48;
              break;
            }

    return { result: result, variables: variables };
  } else {
    throw new Error('Haha, you didn\'t pass me a tree!');
  }
}
//# sourceMappingURL=data:application/json;base64,