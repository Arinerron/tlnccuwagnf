'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.run = run;
var nearley = require('nearley');
var grammar = require('./grammar');
var interp = require('./interp');
var chalk = require('chalk');

function run(code, dir) {
  var parser = new nearley.Parser(grammar.ParserRules, grammar.ParserStart);
  var asts = void 0;

  try {
    asts = parser.feed(code).results;
  } catch (e) {
    // there's been a syntax error :(

    var line = 1;
    var lines = code.split('\n');
    lines.unshift('');
    for (var i = 0; i < e.offset; i++) {
      var char = code[i];
      if (char == '\n') line++;
    }

    var ln = lines[line];

    if (line - 1 > 0) console.log(chalk.bold(line - 1), lines[line - 1]);
    if (line) console.log(chalk.bold(line), chalk.red(ln));
    if (line + 1 < lines.length) console.log(chalk.bold(line + 1), lines[line + 1]);
    throw new Error(chalk.red('\nSyntax Error at ' + chalk.cyan('line ' + line) + '!'));
  }

  if (asts.length > 1) {
    console.warn(chalk.red.bold('!! AMBIGUOUS SYNTAX !!'));
    var _escape = String.fromCharCode(27);
    asts.forEach(function (ast, i) {
      console.warn(JSON.stringify(ast, null, 0));
      console.warn('\n----------------------------\n');
    }) - console.warn(chalk.yellow('\nA total of ' + chalk.cyan(asts.length) + ' ASTs were generated.\nPlease report this on the official issue tracker:\nhttps://github.com/liam4/tlnccuwagnf/issues\nUsing first AST.\n'));
  }

  var result = interp.interp(asts[0], dir);
  return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJ1bi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztRQUtnQixHLEdBQUEsRztBQUxoQixJQUFNLFVBQVUsUUFBUSxTQUFSLENBQWhCO0FBQ0EsSUFBTSxVQUFVLFFBQVEsV0FBUixDQUFoQjtBQUNBLElBQU0sU0FBUyxRQUFRLFVBQVIsQ0FBZjtBQUNBLElBQU0sUUFBUSxRQUFRLE9BQVIsQ0FBZDs7QUFFTyxTQUFTLEdBQVQsQ0FBYSxJQUFiLEVBQW1CLEdBQW5CLEVBQXdCO0FBQzdCLE1BQUksU0FBUyxJQUFJLFFBQVEsTUFBWixDQUFtQixRQUFRLFdBQTNCLEVBQXdDLFFBQVEsV0FBaEQsQ0FBYjtBQUNBLE1BQUksYUFBSjs7QUFFQSxNQUFJO0FBQ0YsV0FBTyxPQUFPLElBQVAsQ0FBWSxJQUFaLEVBQWtCLE9BQXpCO0FBQ0QsR0FGRCxDQUVFLE9BQU8sQ0FBUCxFQUFVOzs7QUFHVixRQUFJLE9BQU8sQ0FBWDtBQUNBLFFBQUksUUFBUSxLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQVo7QUFDQSxVQUFNLE9BQU4sQ0FBYyxFQUFkO0FBQ0EsU0FBSyxJQUFJLElBQUksQ0FBYixFQUFnQixJQUFJLEVBQUUsTUFBdEIsRUFBOEIsR0FBOUIsRUFBbUM7QUFDakMsVUFBSSxPQUFPLEtBQUssQ0FBTCxDQUFYO0FBQ0EsVUFBSSxRQUFRLElBQVosRUFBa0I7QUFDbkI7O0FBRUQsUUFBSSxLQUFLLE1BQU0sSUFBTixDQUFUOztBQUVBLFFBQUksT0FBTyxDQUFQLEdBQVcsQ0FBZixFQUFrQixRQUFRLEdBQVIsQ0FBWSxNQUFNLElBQU4sQ0FBVyxPQUFPLENBQWxCLENBQVosRUFBa0MsTUFBTSxPQUFPLENBQWIsQ0FBbEM7QUFDbEIsUUFBSSxJQUFKLEVBQVUsUUFBUSxHQUFSLENBQVksTUFBTSxJQUFOLENBQVcsSUFBWCxDQUFaLEVBQThCLE1BQU0sR0FBTixDQUFVLEVBQVYsQ0FBOUI7QUFDVixRQUFJLE9BQU8sQ0FBUCxHQUFXLE1BQU0sTUFBckIsRUFBNkIsUUFBUSxHQUFSLENBQVksTUFBTSxJQUFOLENBQVcsT0FBTyxDQUFsQixDQUFaLEVBQWtDLE1BQU0sT0FBTyxDQUFiLENBQWxDO0FBQzdCLFVBQU0sSUFBSSxLQUFKLENBQVUsTUFBTSxHQUFOLHdCQUErQixNQUFNLElBQU4sV0FBbUIsSUFBbkIsQ0FBL0IsT0FBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLLE1BQUwsR0FBYyxDQUFsQixFQUFxQjtBQUNuQixZQUFRLElBQVIsQ0FBYSxNQUFNLEdBQU4sQ0FBVSxJQUFWLENBQWUsd0JBQWYsQ0FBYjtBQUNBLFFBQUksVUFBUyxPQUFPLFlBQVAsQ0FBb0IsRUFBcEIsQ0FBYjtBQUNBLFNBQUssT0FBTCxDQUFhLFVBQVMsR0FBVCxFQUFjLENBQWQsRUFBaUI7QUFDNUIsY0FBUSxJQUFSLENBQWEsS0FBSyxTQUFMLENBQWUsR0FBZixFQUFvQixJQUFwQixFQUEwQixDQUExQixDQUFiO0FBQ0EsY0FBUSxJQUFSLENBQWEsa0NBQWI7QUFDRCxLQUhELElBSUEsUUFBUSxJQUFSLENBQWEsTUFBTSxNQUFOLG1CQUNKLE1BQU0sSUFBTixDQUFXLEtBQUssTUFBaEIsQ0FESSwrSUFBYixDQUpBO0FBVUQ7O0FBRUQsTUFBSSxTQUFTLE9BQU8sTUFBUCxDQUFjLEtBQUssQ0FBTCxDQUFkLEVBQXVCLEdBQXZCLENBQWI7QUFDQSxTQUFPLE1BQVA7QUFDRCIsImZpbGUiOiJydW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBuZWFybGV5ID0gcmVxdWlyZSgnbmVhcmxleScpXG5jb25zdCBncmFtbWFyID0gcmVxdWlyZSgnLi9ncmFtbWFyJylcbmNvbnN0IGludGVycCA9IHJlcXVpcmUoJy4vaW50ZXJwJylcbmNvbnN0IGNoYWxrID0gcmVxdWlyZSgnY2hhbGsnKVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuKGNvZGUsIGRpcikge1xuICBsZXQgcGFyc2VyID0gbmV3IG5lYXJsZXkuUGFyc2VyKGdyYW1tYXIuUGFyc2VyUnVsZXMsIGdyYW1tYXIuUGFyc2VyU3RhcnQpXG4gIGxldCBhc3RzXG5cbiAgdHJ5IHtcbiAgICBhc3RzID0gcGFyc2VyLmZlZWQoY29kZSkucmVzdWx0c1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gdGhlcmUncyBiZWVuIGEgc3ludGF4IGVycm9yIDooXG5cbiAgICBsZXQgbGluZSA9IDFcbiAgICBsZXQgbGluZXMgPSBjb2RlLnNwbGl0KCdcXG4nKVxuICAgIGxpbmVzLnVuc2hpZnQoJycpXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLm9mZnNldDsgaSsrKSB7XG4gICAgICBsZXQgY2hhciA9IGNvZGVbaV1cbiAgICAgIGlmIChjaGFyID09ICdcXG4nKSBsaW5lKytcbiAgICB9XG5cbiAgICBsZXQgbG4gPSBsaW5lc1tsaW5lXVxuXG4gICAgaWYgKGxpbmUgLSAxID4gMCkgY29uc29sZS5sb2coY2hhbGsuYm9sZChsaW5lIC0gMSksIGxpbmVzW2xpbmUgLSAxXSlcbiAgICBpZiAobGluZSkgY29uc29sZS5sb2coY2hhbGsuYm9sZChsaW5lKSwgY2hhbGsucmVkKGxuKSlcbiAgICBpZiAobGluZSArIDEgPCBsaW5lcy5sZW5ndGgpIGNvbnNvbGUubG9nKGNoYWxrLmJvbGQobGluZSArIDEpLCBsaW5lc1tsaW5lICsgMV0pXG4gICAgdGhyb3cgbmV3IEVycm9yKGNoYWxrLnJlZChgXFxuU3ludGF4IEVycm9yIGF0ICR7Y2hhbGsuY3lhbihgbGluZSAke2xpbmV9YCl9IWApKVxuICB9XG5cbiAgaWYgKGFzdHMubGVuZ3RoID4gMSkge1xuICAgIGNvbnNvbGUud2FybihjaGFsay5yZWQuYm9sZCgnISEgQU1CSUdVT1VTIFNZTlRBWCAhIScpKVxuICAgIGxldCBlc2NhcGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDI3KVxuICAgIGFzdHMuZm9yRWFjaChmdW5jdGlvbihhc3QsIGkpIHtcbiAgICAgIGNvbnNvbGUud2FybihKU09OLnN0cmluZ2lmeShhc3QsIG51bGwsIDApKVxuICAgICAgY29uc29sZS53YXJuKCdcXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJylcbiAgICB9KS1cbiAgICBjb25zb2xlLndhcm4oY2hhbGsueWVsbG93KGBcbkEgdG90YWwgb2YgJHtjaGFsay5jeWFuKGFzdHMubGVuZ3RoKX0gQVNUcyB3ZXJlIGdlbmVyYXRlZC5cblBsZWFzZSByZXBvcnQgdGhpcyBvbiB0aGUgb2ZmaWNpYWwgaXNzdWUgdHJhY2tlcjpcbmh0dHBzOi8vZ2l0aHViLmNvbS9saWFtNC90bG5jY3V3YWduZi9pc3N1ZXNcblVzaW5nIGZpcnN0IEFTVC5cbmApKVxuICB9XG5cbiAgbGV0IHJlc3VsdCA9IGludGVycC5pbnRlcnAoYXN0c1swXSwgZGlyKVxuICByZXR1cm4gcmVzdWx0XG59XG4iXX0=